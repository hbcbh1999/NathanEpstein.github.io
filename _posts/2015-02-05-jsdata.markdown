---
layout: post
author: Nathan Epstein
title:  "JavaScript for Data Analysis"
date:   2015-02-26 12:00:00
categories: jekyll update
img: "../img/JS.png"
---

###Introduction

The following are some notes on why JavaScript ought to be an important component of the data analysis ecosystem. It is true that there's less existing infrastructure in JS than other languages (like R and Python) but there are some important structural reasons for this not be the case (if you are interested in doing data analysis in JavaScript, check out this <a href="https://github.com/nathanepstein/datakit">library</a>).

None of this is to diminish the value of other programming languages in doing data analysis. Rather, the point is highlight some reasons JS might be a useful addition.

<div id="tree"></div>

###Visualization Tools

D3.js (and its many offspring), THREE.js, Chart.js, and many others. JavaScript has a robust open source ecosystem for data visualization that other languages generally don't.

###Popularity

The obvious reason to consider JS as a data analysis langauge is its general popularity. As one of the most widely used programming languages, it has an extremely robust open source community.

<img src="/../img/redmonk.png">

Given basic infrastructure (something like a data frame, well implemented convenience methods for summary statistics, etc.) it's reasonable to believe that libraries for specific applications (i.e. regression, unsupervised learning, etc.) could be quickly developed.

###Computer Time & Ease of Contribution

JavaScript V8 is pretty fast. People aren't used to thinking of JS as being a performant language; it's a fairly recent development. But JS stacks up well (see these <a href="http://julialang.org/benchmarks/">performance benchmarks</a>) against both R and Python, the two <a href="http://www.kdnuggets.com/2013/08/languages-for-analytics-data-mining-data-science.html">most widely used</a> data analysis languages.

It is true that much of Python data analysis is faster because major chunks of the popular libraries (pandas, NumPy, etc.) are written in C. However, this language gap means that many of the end users of these libraries are unable to contribute to them. This is certainly a drag on the development of the open source tools.

###Math

It is worth noting that Javascript uses the same floating point arithmetic as Python and R. All three follow the <a href="http://en.wikipedia.org/wiki/IEEE_floating_point">IEEE Standard for Floating-Point Arithmetic (IEEE 754)</a>.

There is a difference in the availability of functions which are optimized to avoid aggregation of floating point errors. But this is not an inherent limitation of JavaScript.

###Single Language Apps

One of the major advantages of JavaScript is that it can be used to easily develop single-language applications (full stack web apps - it's the only language that can run in the browser, mobile applications with frameworks like Ionic, and desktop applications via nw.js). A major benefit of this language uniformity is that it allows developers to avoid context shifting.

For applications that include extensive data analysis, being able to integrate that analysis without requiring context shifting is certainly valuable. Ultimately, this means that developing tools for data analysis will be an important part of maintaining JavaScript's usefulness as a means to build single-language applications.

###Comparison

The following table compares JavaScript, Python, R, and Julia as data analysis languages in the categories of existing infrastructure, speed, visualization, and open source community. Infrastructure is determined based on which language is most used for data analysis (following the rankings in the article linked above), speed follows the Julia website benchmarks, visualization is determined by stars on the repo for the most popular visualization library (D3, matplotlib, ggplot2, and Gadfly), and open source community follows the RedMonk language rankings. The highest rank is 1, the lowest is 4.

*Obviously, this approach is highly imperfect. It is not intended to be taken as a definitive ranking but as loose insight into the trade offs of the various languages.*

<img src="/../img/langtable.png">

JavaScript compares favorably to R and Python on every dimension except existing infrastructure, which is arguably the easiest thing to change. Importantly, JavaScript has an extremely robust open source community which makes closing the infrastructure gap a more manageable problem.


<!-- tree vis js and styling -->
<style>
  .node circle {
    fill: #fff;
    stroke: steelBlue;
    stroke-width: 3px;
  }

  .node text { font: 12px sans-serif; }

  .link {
    fill: none;
    stroke: #ccc;
    stroke-width: 2px;
  }
</style>
<script src="http://d3js.org/d3.v3.min.js"></script>

<script>

var treeData = [
  {
    "name": "Why Use JavaScript for Data Analysis?",
    "parent": "null",
    "children": [
      {
        "name": "Visualization Tools",
        "children": [
          {
            "name": "D3.js",
            "children": [
              {
                "name": "NVD3"
              },
              {
                "name": "dimple"
              },
              {
                "name": "d3xter"
              },
              {
                "name": "many others..."
              }
            ]
          },
          {
            "name": "Chart.js",
          },
          {
            "name": "three.js",
          }
        ]
      },
      {
        "name": "App Integration",
        "children": [
          {
            "name": "Front-end Web"
          },
          {
            "name": "Back-end Web (Node.js)"
          },
          {
            "name": "Mobile Applications (Ionic)"
          },
          {
            "name": "Desktop Applications (nw.js)"
          }
        ]
      },
      {
        "name": "Node.js",
        "children": [
          {
            "name": "npm",
            "children": [
              {
                "name": "Ease of Contribution"
              },
              {
                "name": "Large OS Community"
              },
            ]
          },
          {
            "name": "Speed",
          },
          {
            "name": "File IO",
          }
        ]
      }
    ]
  }
];

var margin = {top: 20, right: 120, bottom: 20, left: 250},
  width = 960 - margin.right - margin.left,
  height = 500 - margin.top - margin.bottom;

var i = 0;

var tree = d3.layout.tree()
  .size([height, width]);

var diagonal = d3.svg.diagonal()
  .projection(function(d) { return [d.y, d.x]; });

var svg = d3.select("#tree").append("svg")
  .attr("width", width + margin.right + margin.left)
  .attr("height", height + margin.top + margin.bottom)
  .append("g")
  .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

root = treeData[0];

update(root);

function update(source) {

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse(),
    links = tree.links(nodes);

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 180; });

  // Declare the nodes…
  var node = svg.selectAll("g.node")
    .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter the nodes.
  var nodeEnter = node.enter().append("g")
    .attr("class", "node")
    .attr("transform", function(d) {
      return "translate(" + d.y + "," + d.x + ")"; });

  nodeEnter.append("circle")
    .attr("r", 10)
    .style("fill", "#fff");

  nodeEnter.append("text")
    .attr("x", function(d) {
      return d.children || d._children ? -13 : 13; })
    .attr("dy", ".35em")
    .attr("text-anchor", function(d) {
      return d.children || d._children ? "end" : "start"; })
    .text(function(d) { return d.name; })
    .style("fill-opacity", 1);

  // Declare the links…
  var link = svg.selectAll("path.link")
    .data(links, function(d) { return d.target.id; });

  // Enter the links.
  link.enter().insert("path", "g")
    .attr("class", "link")
    .attr("d", diagonal);

}
</script>

